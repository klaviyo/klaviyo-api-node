/**
 * Klaviyo API
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * Contact: developers@klaviyo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { TeaserStyles } from './teaserStyles';
export class Teaser {
    'id'?: string | null;
    'content': string;
    /**
    * Teaser display order enumeration.
    */
    'displayOrder'?: Teaser.DisplayOrderEnum | 'after' | 'before' | 'before_and_after' = Teaser.DisplayOrderEnum.After;
    /**
    * Teaser display order enumeration.
    */
    'teaserType'?: Teaser.TeaserTypeEnum | 'circle' | 'corner' | 'rectangle' = Teaser.TeaserTypeEnum.Rectangle;
    /**
    * Display location enumeration.
    */
    'location'?: Teaser.LocationEnum | 'bottom_center' | 'bottom_left' | 'bottom_right' | 'center_left' | 'center_right' | 'top_center' | 'top_left' | 'top_right' = Teaser.LocationEnum.BottomLeft;
    /**
    * Teaser size enumeration.
    */
    'size'?: Teaser.SizeEnum | 'custom' | 'large' | 'medium' | 'small' = Teaser.SizeEnum.Small;
    'customSize'?: number | null;
    'styles'?: TeaserStyles;
    'closeButton'?: boolean = true;
    /**
    * Enumeration for mobile and desktop.
    */
    'deviceType'?: Teaser.DeviceTypeEnum | 'both' | 'desktop' | 'mobile' = Teaser.DeviceTypeEnum.Both;


    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "displayOrder",
            "baseName": "display_order",
            "type": "Teaser.DisplayOrderEnum"
        },
        {
            "name": "teaserType",
            "baseName": "teaser_type",
            "type": "Teaser.TeaserTypeEnum"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "Teaser.LocationEnum"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "Teaser.SizeEnum"
        },
        {
            "name": "customSize",
            "baseName": "custom_size",
            "type": "number"
        },
        {
            "name": "styles",
            "baseName": "styles",
            "type": "TeaserStyles"
        },
        {
            "name": "closeButton",
            "baseName": "close_button",
            "type": "boolean"
        },
        {
            "name": "deviceType",
            "baseName": "device_type",
            "type": "Teaser.DeviceTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return Teaser.attributeTypeMap;
    }
}

export namespace Teaser {
    export enum DisplayOrderEnum {
        After = <any> 'after',
        Before = <any> 'before',
        BeforeAndAfter = <any> 'before_and_after'
    }
    export enum TeaserTypeEnum {
        Circle = <any> 'circle',
        Corner = <any> 'corner',
        Rectangle = <any> 'rectangle'
    }
    export enum LocationEnum {
        BottomCenter = <any> 'bottom_center',
        BottomLeft = <any> 'bottom_left',
        BottomRight = <any> 'bottom_right',
        CenterLeft = <any> 'center_left',
        CenterRight = <any> 'center_right',
        TopCenter = <any> 'top_center',
        TopLeft = <any> 'top_left',
        TopRight = <any> 'top_right'
    }
    export enum SizeEnum {
        Custom = <any> 'custom',
        Large = <any> 'large',
        Medium = <any> 'medium',
        Small = <any> 'small'
    }
    export enum DeviceTypeEnum {
        Both = <any> 'both',
        Desktop = <any> 'desktop',
        Mobile = <any> 'mobile'
    }
}
